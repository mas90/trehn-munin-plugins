#!/usr/bin/env python
#
### LICENSE
#
# Copyright (c) 2014, Torsten Rehn <torsten@rehn.tel>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
### USAGE
#
# on XenServer:
#
# useradd munin; passwd munin
#
# on Munin host:
#
# aptitude install python-xenapi
#
# vi /etc/munin/plugin-conf.d/munin-node
# [my_virtual_xenserver_host]
# host_name example.com
# timeout 60
# env.xapi_url http://example.com
# env.xapi_user munin
# env.xapi_pass sW0Rdf15H
#
from datetime import datetime
from os import environ
from sys import argv
from time import time
from urllib2 import urlopen
from xml.etree import cElementTree as ElementTree

from XenAPI import Session


URL = environ.get('xapi_url', "http://localhost")
USER = environ.get('xapi_user', "munin")
PASS = environ.get('xapi_pass', "")


class XenAPISession(object):
    def __enter__(self):
        self.s = Session(URL)
        self.s.xenapi.login_with_password(USER, PASS)
        return self.s

    def __exit__(self, type, value, traceback):
        self.s.xenapi.logout()


def cpu_allocation_config():
    print(
        "multigraph cpu_allocation\n"
        "graph_title VCPU allocation\n"
        "graph_args --slope-mode -l 0\n"
        "graph_info 'Assigned cores' are considered to handle exactly one VCPU. 'Spare cores' is by how much the number of physical cores exceed the number of VCPUs. 'Overcommitted VCPUs' is by how much the number of VCPUs exceed the number of physical cores.\n"
        "graph_vlabel Number\n"
        "graph_category virtualization\n"
        "assigned.draw AREASTACK\n"
        "assigned.label assigned cores\n"
        "assigned.colour 0000dd\n"
        "spare.draw AREASTACK\n"
        "spare.label spare cores\n"
        "spare.colour 00dd00\n"
        "overcommitted.draw AREASTACK\n"
        "overcommitted.label overcommitted VCPUs\n"
        "overcommitted.colour dd0000\n"
        "totalassigned.draw LINE0\n"
        "totalassigned.label total VCPUs\n"
        "totalassigned.colour ffffff\n"
    )
    print(
        "multigraph cpu_overcommitment_factor\n"
        "graph_title VCPUs per physical core\n"
        "graph_args --slope-mode -l 0\n"
        "graph_category virtualization\n"
        "graph_info Shows how many VCPUs a physical core has to handle on average."
        "graph_vlabel VCPUs\n"
        "vcpus.label overcommitment factor\n"
        "vcpus.colour dd0000\n"
    )
    for host_record in hosts.values():
        print(
            "multigraph cpu_allocation.{}\n"
            "graph_title VCPU allocation for {}\n"
            "graph_args --slope-mode -l 0\n"
            "graph_info 'Assigned cores' are considered to handle exactly one VCPU. 'Spare cores' is by how much the number of physical cores exceed the number of VCPUs. 'Overcommitted VCPUs' is by how much the number of VCPUs exceed the number of physical cores.\n"
            "graph_vlabel Number\n"
            "graph_category virtualization\n"
            "assigned.draw AREASTACK\n"
            "assigned.label assigned cores\n"
            "assigned.colour 0000dd\n"
            "spare.draw AREASTACK\n"
            "spare.label spare cores\n"
            "spare.colour 00dd00\n"
            "overcommitted.draw AREASTACK\n"
            "overcommitted.label overcommitted VCPUs\n"
            "overcommitted.colour dd0000\n"
            "totalassigned.draw LINE0\n"
            "totalassigned.label total VCPUs\n"
            "totalassigned.colour ffffff\n".format(
                host_record["uuid"].replace("-", ""),
                host_record["name_label"],
            )
        )
        print(
            "multigraph cpu_overcommitment_factor.{}\n"
            "graph_title VCPUs per physical core on {}\n"
            "graph_args --slope-mode -l 0\n"
            "graph_category virtualization\n"
            "graph_info Shows how many VCPUs a physical core has to handle on average."
            "graph_vlabel VCPUs\n"
            "vcpus.label overcommitment factor\n"
            "vcpus.colour dd0000\n".format(
                host_record["uuid"].replace("-", ""),
                host_record["name_label"],
            )
        )


def cpu_allocation_values():
    print("multigraph cpu_allocation")
    physical = 0
    vcpuassigned = 0
    for host_record in hosts.values():
        physical += int(host_record["cpu_info"]["cpu_count"])
        for vm_opref in host_record["resident_VMs"]:
            if vm_opref in vms.keys():
                vcpuassigned += int(vms[vm_opref]["VCPUs_at_startup"])

    assigned = min(vcpuassigned, physical)
    spare = physical - assigned
    overcommitted = max(0, vcpuassigned - physical)

    print("assigned.value {}".format(assigned))
    print("spare.value {}".format(spare))
    print("overcommitted.value {}".format(overcommitted))
    print("totalassigned.value {}".format(assigned + overcommitted))
    print("")

    print("multigraph cpu_overcommitment_factor")
    print("vcpus.value {0:.2f}".format(float(vcpuassigned) / float(physical)))
    print("")

    for host_opref, host_record in hosts.items():
        print("multigraph cpu_allocation.{}".format(host_record["uuid"].replace("-", "")))
        physical = int(host_record["cpu_info"]["cpu_count"])
        vcpuassigned = 0
        for vm_opref in host_record["resident_VMs"]:
            if vm_opref in vms.keys():
                vcpuassigned += int(vms[vm_opref]["VCPUs_at_startup"])

        assigned = min(vcpuassigned, physical)
        spare = physical - assigned
        overcommitted = max(0, vcpuassigned - physical)

        print("assigned.value {}".format(assigned))
        print("spare.value {}".format(spare))
        print("overcommitted.value {}".format(overcommitted))
        print("totalassigned.value {}".format(assigned + overcommitted))
        print("")

        print("multigraph cpu_overcommitment_factor.{}".format(host_record["uuid"].replace("-", "")))
        print("vcpus.value {0:.2f}".format(float(vcpuassigned) / float(physical)))
        print("")


def cpu_usage_config():
    print(
        "multigraph cpu_usage\n"
        "graph_title CPU usage (all cores average)\n"
        "graph_args --slope-mode --upper-limit 100 --lower-limit 0 --rigid\n"
        "graph_vlabel %\n"
        "graph_category virtualization"
    )
    for name, uuid in sorted([
        (host_record["name_label"], host_record["uuid"].replace("-", ""))
        for host_record in hosts.values()
    ]):
        print("host_{}.label {}".format(
            uuid,
            name,
        ))
        print("host_{}.draw LINE1".format(uuid))
        print("")

    for host_record in hosts.values():
        print(
            "multigraph cpu_usage.{}\n"
            "graph_title CPU usage for {}\n"
            "graph_args --slope-mode --upper-limit 100 --lower-limit 0 --rigid\n"
            "graph_vlabel %\n"
            "graph_category virtualization"
        ).format(
            host_record["uuid"].replace("-", ""),
            host_record["name_label"],
        )
        for core_number in sorted(
                [int(core) for core in host_cpu_usage[host_record["uuid"]].keys()]
        ):
            if core_number == 0:
                print("host_{}_core_{}.label average".format(
                    host_record["uuid"].replace("-", ""),
                    core_number,
                ))
                print("host_{}_core_{}.draw LINE3".format(
                    host_record["uuid"].replace("-", ""),
                    core_number,
                ))
            else:
                print("host_{}_core_{}.label core {}".format(
                    host_record["uuid"].replace("-", ""),
                    core_number,
                    core_number,
                ))
                print("host_{}_core_{}.draw LINE1".format(
                    host_record["uuid"].replace("-", ""),
                    core_number,
                ))
        print("")


def cpu_usage_values():
    print("multigraph cpu_usage")
    for host_record in hosts.values():
        number_of_cores = 0
        total_utilisation = 0.0
        for core_number, utilisation in host_cpu_usage[host_record["uuid"]].items():
            number_of_cores += 1
            total_utilisation += utilisation
        print("host_{}.value {}".format(
            host_record["uuid"].replace("-", ""),
            int(host_cpu_usage[host_record["uuid"]][0] * 100),
        ))
    print("")

    for host_opref, host_record in hosts.items():
        print("multigraph cpu_usage.{}".format(host_record["uuid"].replace("-", "")))
        for core_number, utilisation in host_cpu_usage[host_record["uuid"]].items():
            print("host_{}_core_{}.value {}".format(
                host_record["uuid"].replace("-", ""),
                core_number,
                int(utilisation * 100.0),
            ))
        print("")


def ram_usage_config():
    print(
        "multigraph ram_usage\n"
        "graph_title RAM usage\n"
        "graph_args --slope-mode -l 0\n"
        "graph_vlabel GB\n"
        "graph_category virtualization\n"
        "total.draw AREA\n"
        "total.label total\n"
        "total.colour 00dd00\n"
        "used.draw AREA\n"
        "used.label used\n"
        "used.colour dd0000\n"
        "free.draw LINE0\n"
        "free.label free\n"
        "free.colour ffffff\n"
    )
    for host_record in hosts.values():
        print(
            "multigraph ram_usage.{}\n"
            "graph_title RAM usage for {}\n"
            "graph_args --slope-mode -l 0\n"
            "graph_vlabel GB\n"
            "graph_category virtualization\n"
            "total.draw AREA\n"
            "total.label total\n"
            "total.colour 00dd00\n"
            "used.draw AREA\n"
            "used.label used\n"
            "used.colour dd0000\n"
            "free.draw LINE0\n"
            "free.label free\n"
            "free.colour ffffff\n".format(
                host_record["uuid"].replace("-", ""),
                host_record["name_label"],
            )
        )


def ram_usage_values():
    print("multigraph ram_usage")
    free = 0.0
    total = 0.0
    for metric_record in host_metrics.values():
        free += float(metric_record["memory_free"]) / 1073741824.0
        total += float(metric_record["memory_total"]) / 1073741824.0
    used = total - free

    print("total.value {}".format(total))
    print("used.value {}".format(used))
    print("free.value {}".format(free))
    print("")

    for host_opref, host_record in hosts.items():
        print("multigraph ram_usage.{}".format(host_record["uuid"].replace("-", "")))

        free = float(host_metrics[host_opref]["memory_free"]) / 1073741824.0
        total = float(host_metrics[host_opref]["memory_total"]) / 1073741824.0
        used = total - free

        print("total.value {}".format(total))
        print("used.value {}".format(used))
        print("free.value {}".format(free))
        print("")


def vm_count_config():
    print(
        "multigraph vm_count\n"
        "graph_title VM count\n"
        "graph_args --slope-mode -l 0\n"
        "graph_vlabel virtual machines\n"
        "graph_category virtualization\n"
        "total.draw LINE0\n"
        "total.label total\n"
        "total.colour ffffff"
    )
    for host_record in hosts.values():
        print(
            "{0}.draw AREASTACK\n"
            "{0}.label {1}".format(
                host_record["uuid"].replace("-", ""),
                host_record["name_label"],
            )
        )
    print("")


def vm_count_values():
    print("multigraph vm_count")
    print("total.value {}".format(len(vms)))
    for host_record in hosts.values():
        real_vms = [vm_opref for vm_opref in host_record["resident_VMs"]
                    if vm_opref in vms.keys()]
        print("{}.value {}".format(
            host_record["uuid"].replace("-", ""),
            len(real_vms),
        ))
    print("")


def vm_uptime_config():
    print(
        "multigraph vm_uptime\n"
        "graph_title VM uptime\n"
        "graph_args --slope-mode -l 0\n"
        "graph_vlabel days\n"
        "graph_category virtualization\n"
        "max.draw LINE2\n"
        "max.label max\n"
        "max.colour dd0000\n"
        "avg.draw LINE2\n"
        "avg.label average\n"
        "avg.colour 0000dd\n"
        "min.draw LINE2\n"
        "min.label min\n"
        "min.colour 00dd00\n"
    )


def vm_uptime_values():
    print("multigraph vm_uptime")
    now = datetime.utcnow()
    uptime_max = 0.0
    uptime_min = 99999.9
    uptime_total = 0.0

    for vm_opref, vm_record in vms.items():
        metric_record = vm_metrics[vm_opref]
        start_time = datetime.strptime(
            metric_record["start_time"].value,
            "%Y%m%dT%H:%M:%SZ",
        )
        uptime = now - start_time
        uptime_days = uptime.total_seconds() / 86400.0
        if uptime_days > uptime_max:
            uptime_max = uptime_days
        if uptime_days < uptime_min:
            uptime_min = uptime_days
        uptime_total += uptime_days

    uptime_average = uptime_total / len(vms)

    print("max.value {}".format(uptime_max))
    print("avg.value {}".format(uptime_average))
    print("min.value {}".format(uptime_min))
    print("")


if __name__ == '__main__':
    vms = {}
    vm_metrics = {}
    hosts = {}
    host_cpu_usage = {}
    host_metrics = {}

    with XenAPISession() as session:
        for vm_opref in session.xenapi.VM.get_all():
            vm_record = session.xenapi.VM.get_record(vm_opref)
            if vm_record["power_state"] != "Running" or \
                    vm_record["is_control_domain"] is True:
                continue
            vms[vm_opref] = vm_record
            metric_opref = vms[vm_opref]["metrics"]
            vm_metrics[vm_opref] = \
                session.xenapi.VM_metrics.get_record(metric_opref)

        for host_opref in session.xenapi.host.get_all():
            hosts[host_opref] = session.xenapi.host.get_record(host_opref)
            metric_opref = hosts[host_opref]["metrics"]
            host_metrics[host_opref] = \
                session.xenapi.host_metrics.get_record(metric_opref)
            host_cpu_usage[hosts[host_opref]['uuid']] = {}

            rrd_data = urlopen("http://{}/rrd_updates?session_id={}&start={}&host=true".format(
                hosts[host_opref]['address'],
                session._session,
                int(time()) - 60,
            )).read()

            root = ElementTree.fromstring(rrd_data)
            cpu_columns = []
            for i, column in enumerate(root.iter("entry")):
                if column.text.startswith("AVERAGE:host:") \
                        and ":cpu" in column.text \
                        and "-C" not in column.text:
                    cpu_columns.append(i)
                if column.text.startswith("AVERAGE:vm:"):
                    break

            row = root.iter("row").next()
            cpu_core = 0
            for i, value in enumerate(row.iter("v")):
                if i in cpu_columns:
                    host_cpu_usage[hosts[host_opref]['uuid']][cpu_core] = float(value.text)
                    cpu_core += 1
                if cpu_core > len(cpu_columns):
                    break

    if len(argv) == 2 and argv[1] == "config":
        cpu_allocation_config()
        cpu_usage_config()
        ram_usage_config()
        vm_count_config()
        vm_uptime_config()
    else:
        cpu_allocation_values()
        cpu_usage_values()
        ram_usage_values()
        vm_count_values()
        vm_uptime_values()
